Ques: (CodeChef)

You are given two sequences A1,A2,…,AN and B1,B2,…,BN. You should choose a permutation P1,P2,…,PN of the integers 1 through N and construct N rectangles with dimensions A1×BP1,A2×BP2,…,AN×BPN. Then, for each of these rectangles, you should construct an inscribed circle, i.e. a circle with the maximum possible area that is completely contained in that rectangle.

Let S be the sum of diameters of these N circles. Your task is to find the maximum value of S.

Input
The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows.
The first line of each test case contains a single integer N.
The second line contains N space-separated integers A1,A2,…,AN.
The third line contains N space-separated integers B1,B2,…,BN.

Output
For each test case, print a single line containing one integer ― the maximum value of S. It is guaranteed that this value is always an integer.

Constraints
1≤T≤50
1≤N≤104
1≤Ai,Bi≤109 for each valid i

Example Input
2
4
8 8 10 12
15 20 3 5
3
20 20 20
10 10 10

Example Output
30
30

Explanation
Example case 1: Four rectangles with dimensions 8×3, 8×5, 10×20 and 12×15 lead to an optimal answer.

Code:

import java.util.*;
import java.lang.*;
import java.io.*;

/* Name of the class has to be "Main" only if the class is public. */
class Codechef
{
    public static void main (String[] args) throws java.lang.Exception
	{
		Scanner obj = new Scanner(System.in);
		int t = obj.nextInt();
		
		while(t-->0)
		{
		    long s = 0;
		    int n = obj.nextInt();
		    int temp = n;
		    
		    int a[] = new int[n];
		    int b[] = new int[n];
		    
		    while(n-->0)
		    {
		        a[n] = obj.nextInt();
		    }
		    n = temp;
		    while(n-->0)
		    {
		        b[n] = obj.nextInt();
		    }
		    
		    Arrays.sort(a);
		    Arrays.sort(b);
		    
		    n = temp;
		    while(n-->0)
		    {
		        if(a[n]<b[n])
		        {
		            s += a[n];
		        }
		        else
		        {
		            s += b[n];
		        }
		        
		    }
		    System.out.println(s);
		}
	}
}
